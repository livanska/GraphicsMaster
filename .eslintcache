[{"C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\index.js":"1","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\reportWebVitals.js":"2","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Helpers\\Complex.js":"3","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\App.js":"4","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\Fractal.js":"5","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\Navbar.js":"6","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\Dropdown.js":"7","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\ColorModel.js":"8","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\ImageLoader.js":"9","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Helpers\\ColorConvertor.js":"10"},{"size":590,"mtime":1607967964396,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1330,"mtime":1607628917477,"results":"14","hashOfConfig":"12"},{"size":739,"mtime":1608056385437,"results":"15","hashOfConfig":"12"},{"size":7399,"mtime":1608159757624,"results":"16","hashOfConfig":"12"},{"size":1516,"mtime":1608027540846,"results":"17","hashOfConfig":"12"},{"size":3116,"mtime":1608031052505,"results":"18","hashOfConfig":"12"},{"size":8107,"mtime":1608198391356,"results":"19","hashOfConfig":"12"},{"size":508,"mtime":1608196495042,"results":"20","hashOfConfig":"12"},{"size":7821,"mtime":1608159435452,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"kwqpfc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},"C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\index.js",[],["48","49"],"C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\reportWebVitals.js",[],"C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Helpers\\Complex.js",[],"C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\App.js",["50"],"import './Style/App.scss';\nimport './Style/Button.scss';\nimport './Style/Dropdown.scss';\n\nimport {Route,  BrowserRouter } from 'react-router-dom';\nimport Navbar  from './Components/Navbar';\nimport Fractal from './Components/Fractal';\nimport ColorModel from './Components/ColorModel';\n\n\n  const container = {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100vw',\n    height: '100vh',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n\nfunction App() {\n  return (  \n    <div className=\"App\">\n      \n\n  <BrowserRouter>\n    <Navbar />\n    <Route path=\"/fractal_drawer\" component={Fractal} />\n    <Route path=\"/color_model\" component={ColorModel} />\n  </BrowserRouter>\n\n\n\n\n  \n   \n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\Fractal.js",["51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"import React from 'react';\r\nimport {Complex,moduleComplex,sinComplex,cosComplex,multiplyComplex, addComplex} from '../Helpers/Complex.js';\r\nimport ColorConvertor from '../Helpers/ColorConvertor.js';\r\nimport \"../Style/Text.scss\"\r\nimport \"../Style/Grids.scss\"\r\nimport \"../Style/Dropdown.scss\"\r\nimport Dropdown from \"./Dropdown\"\r\nimport \"../Style/Button.scss\"\r\n\r\nconst colorOptions = [\r\n    { key: Array(128,0,0), text: 'Maroon' },\r\n    { key: Array(0,73,24), text: 'Smaragd' },\r\n    { key: Array(90,0,45), text: 'Wine' },\r\n    { key: Array(0,0,70), text: 'Denim' },\r\n    { key: Array(58,37,0), text: 'Chocolate' },\r\n    { key: Array(28,28,28), text: 'Charcoal' }]\r\n\r\nconst zoomOptions = [\r\n        { key: 1, text: '100% (standart)' },\r\n        { key: 1.2, text: '80%' },\r\n        { key: 1.4, text: '60%' },\r\n        { key: 1.6, text: '40%' },\r\n        { key: 1.8, text: '20%' }]\r\n   /* Maroon 128, 0, 0\r\n    Smaragd 0,73,24\r\n    Wine 90,0,45\r\n    Denim 0,0,70\r\n    Chocolate 58,37,0\r\n    Charcoal 28,28,28*/\r\n    \r\n    class Fractal extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            colorPal : \"128,0,0\",\r\n            WIDTH : 880,\r\n            HEIGHT : 545,\r\n            MAX_ITERATION : 100,    \r\n            REAL_SET : { start: -3, end:1},\r\n            IMAGINARY_SET :{ start: -1, end:1 },\r\n            colors:[], \r\n            zoom : 1,\r\n            link:\"\",\r\n            wantDownload: false\r\n           }\r\n        this.draw = this.draw.bind(this)\r\n        this.clean = this.clean.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleColorChange= this.handleColorChange.bind(this);\r\n        this.handleZoomChange= this.handleZoomChange.bind(this);\r\n\r\n        \r\n        //this.downloadImg = this.downloadImg.bind(this)\r\n    }\r\n\r\n\r\n    handleColorChange = e => \r\n    { \r\n        this.setState({colorPal: e}, () => \r\n        {\r\n            if (this.props.onChange) \r\n            {\r\n                this.props.onChange(this.state);\r\n            }\r\n        })\r\n        this.setColors()\r\n    }\r\n\r\n    handleZoomChange = e => \r\n    {\r\n        this.setState({zoom: Number(e)}, () => \r\n        {\r\n            if (this.props.onChange) \r\n            {\r\n                this.props.onChange(this.state);\r\n            }\r\n        })\r\n        this.setZoom()\r\n        \r\n    }\r\n\r\n    handleClick() \r\n    {\r\n       this.setColors()\r\n        this.setZoom()\r\n       this.draw()\r\n    }\r\n\r\n    func(c) \r\n    {\r\n        let z = new Complex(0,0)\r\n        let prevZ = new Complex(0,0)\r\n        let  iterationNumber = 0, module;\r\n        do {\r\n            let sinZ = sinComplex(prevZ);\r\n            let multZ = (multiplyComplex(sinZ , prevZ))\r\n            z = (addComplex(c,multZ))\r\n            module = moduleComplex(z);\r\n            iterationNumber += 1\r\n            prevZ = z\r\n        } while (module <= 16 && iterationNumber < this.state.MAX_ITERATION)\r\n        return [iterationNumber, Math.abs(module)<= 16,z]\r\n    }\r\n   \r\n    setColors()\r\n    {\r\n        let str = []\r\n        let color = []\r\n        let CC = new ColorConvertor()\r\n        let prevColors = this.state.colors;\r\n        if(this.state.colorPal != undefined)\r\n        {  \r\n            str = this.state.colorPal.split(\",\")\r\n            str.forEach(e=> color.push(Number.parseInt(e)))\r\n            this.state.colors =[];\r\n            \r\n            for(let i=0;i<16;i++)\r\n            {  \r\n            let newcolor=[];\r\n            for(let j=0;j<3;j++)\r\n            {   \r\n                newcolor.push(Number((Number(color[j]) + ((255 - Number(color[j])) * 0.1)).toFixed(0)))\r\n            }\r\n            this.state.colors.push(CC.rgbToHex(newcolor))\r\n            color = newcolor;\r\n            }  \r\n        }\r\n        else this.state.colors = prevColors\r\n\r\n    }\r\n   \r\n    setZoom()\r\n    {\r\n        let defaultSet = [-2.7,1,-1,1]\r\n        this.state.IMAGINARY_SET.start = Number((defaultSet[2] * this.state.zoom).toPrecision(4))\r\n        this.state.IMAGINARY_SET.end = defaultSet[3] * this.state.zoom\r\n        this.state.REAL_SET.start = defaultSet[0]  * this.state.zoom\r\n        this.state.REAL_SET.end = defaultSet[1] * this.state.zoom\r\n        console.log(this.state.IMAGINARY_SET)\r\n        console.log(this.state.REAL_SET)\r\n    }\r\n\r\n    draw() \r\n    {\r\n\r\n        this.clean()\r\n        var ctx = this.refs.canvas.getContext('2d')\r\n        \r\n        ctx.fillStyle = \"rgba(0, 0, 0, 0)\";\r\n        ctx.fillRect(0, 0, this.state.WIDTH, this.state.HEIGHT);\r\n        for (let i = 0; i <this.state.WIDTH; i++) \r\n        {\r\n            for (let j = 0; j < this.state.HEIGHT; j++) \r\n            {\r\n               let complex = new Complex(\r\n                    // f = i/WIDTH --- scale in 0-1\r\n                    // realPart = f*this.state.REAL_SET.end - this.state.REAL_SET.start --- in range 0-complex plane width\r\n                    // realPart = this.state.REAL_SET.start+realPart --- shift from plane start\r\n                this.state.REAL_SET.start + (i / this.state.WIDTH) * (this.state.REAL_SET.end - this.state.REAL_SET.start),\r\n                 this.state.IMAGINARY_SET.start + (j / this.state.HEIGHT) * (this.state.IMAGINARY_SET.end - this.state.IMAGINARY_SET.start))   \r\n                    \r\n                const [iterations, isFunc] = this.func(complex)\r\n                ctx.fillStyle = this.state.colors[isFunc ? 0 : (iterations % this.state.colors.length - 1) ]\r\n                ctx.fillRect(i, j, 1, 1)\r\n            }\r\n        }\r\n        ctx.closePath()    \r\n \r\n           \r\n    }\r\n    clean()\r\n    {\r\n        var ctx = this.refs.canvas.getContext('2d')\r\n        ctx.fillStyle = '#FFFFFF'\r\n        ctx.fillRect(0, 0, 880, 545);\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n        <div className = \"page-content\">\r\n            <div className =\"content-column fractal-canvas\" >\r\n           \r\n                <canvas ref=\"canvas\" height =\"545\" width= \"880\"></canvas>\r\n            </div>\r\n      \r\n            <div>\r\n                <div className = \"content-column fractal-information\">\r\n                    <h1 style ={{\"fontSize\":\"48px\"}} className =\"header-text\">Fractal Drawer</h1>\r\n                    <label style ={{\"fontSize\":\"24px\"}} className = \"plain-text\">Fractal:  y = z·(sin z)</label>\r\n                    <div  className =  \"choose-information\">\r\n                        <p style ={{\"fontSize\":\"24px\"}} className = \"plain-text\">Choose color schema and scaling value:</p>\r\n                        <div >   \r\n                            <div  className =\"content-input\">\r\n                            <Dropdown\r\n                            defaultText={\"Color schema\"}\r\n                            optionsList={colorOptions}\r\n                            onClick={this.handleColorChange}/>\r\n                            </div>\r\n                            <div className =\"content-input\">\r\n                            <Dropdown\r\n                            defaultText={\"Scaling value\"}\r\n                            optionsList={zoomOptions}\r\n                            onClick={this.handleZoomChange}/>\r\n                            </div>\r\n                        </div>\r\n                        <button className= \"content-button button-primary \" onClick = {this.handleClick}>Draw</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        )   \r\n    }\r\n   \r\n}\r\nexport default Fractal;","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\Navbar.js",["65"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../Style/Navbar.scss';\r\nimport Logo from '../Resources/Images/Logo.svg'\r\n\r\nconst Navbar = () => (\r\n  <nav className=\"navbar\">\r\n    \r\n      <img className=\"navbar-logo\" src={Logo} />\r\n \r\n    <div className =\"navbar-center-group\" >\r\n        <div  >\r\n            <NavLink\r\n            exact\r\n            activeClassName=\"navbar-link-active\"\r\n            className=\"navbar-link\"\r\n            to=\"/\"\r\n            >\r\n            Home\r\n            </NavLink>\r\n        </div>\r\n\r\n        <div >\r\n            <NavLink\r\n            activeClassName=\"navbar-link-active\"\r\n            className=\"navbar-link\"\r\n            to=\"/fractal_drawer\"\r\n            >\r\n            Fractal Drawer\r\n            </NavLink>\r\n        </div>\r\n\r\n        <div  >\r\n            <NavLink\r\n            activeClassName=\"navbar-link-active\"\r\n            className=\"navbar-link\"\r\n            to=\"/color_model\"\r\n            >\r\n            Color Model\r\n            </NavLink>\r\n        </div>\r\n\r\n        <div >\r\n            <NavLink\r\n            activeClassName=\"navbar-link-active\"\r\n            className=\"navbar-link\"\r\n            to=\"/shape_mover\"\r\n            >\r\n            Shape Mover\r\n            </NavLink>\r\n        </div>\r\n    </div>\r\n\r\n    <div  >\r\n        <NavLink\r\n        activeClassName=\"navbar-link-active\"\r\n        className=\"navbar-link\"\r\n        to=\"/help\"\r\n        >\r\n        Need Help?\r\n        </NavLink>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\Dropdown.js",["66","67"],"import React from \"react\";\r\nimport \"../Style/Dropdown.scss\"\r\nimport Icon from '../Resources/Images/Dropdown-icon.svg'\r\nclass Dropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // @defaultSelectText => Show default text in select\r\n    // @showOptionList => Show / Hide List options\r\n    // @optionsList => List of options\r\n    this.state = {\r\n      defaultSelectText: \"\",\r\n      showOptionList: false,\r\n      optionsList: [],\r\n      currentOption:\"\"\r\n    };\r\n    this.handleOptionClick = this.handleOptionClick.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Add Event Listner to handle the click that happens outside\r\n    // the Custom Select Container\r\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    this.setState({\r\n      defaultSelectText: this.props.defaultText\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Remove the event listner on component unmounting\r\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n  }\r\n\r\n  // This method handles the click that happens outside the\r\n  // select text and list area\r\n  handleClickOutside = e => {\r\n    if (\r\n      !e.target.classList.contains(\"custom-select-option\") &&\r\n      !e.target.classList.contains(\"selected-text\")\r\n    ) {\r\n      this.setState({\r\n        showOptionList: false\r\n      });\r\n    }\r\n  };\r\n\r\n  // This method handles the display of option list\r\n  handleListDisplay = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        showOptionList: !prevState.showOptionList\r\n      };\r\n    });\r\n  };\r\n\r\n  // This method handles the setting of name in select text area\r\n  // and list display on selection\r\n  handleOptionClick = e => {\r\n    this.setState({\r\n      defaultSelectText: e.target.getAttribute(\"data-name\"),\r\n      showOptionList: false,\r\n      currentOption: e.target.getAttribute(\"value\"),\r\n      \r\n     \r\n        \r\n    });\r\n\r\n  this.props.onClick( e.target.getAttribute(\"value\"))\r\n    e.preventDefault();\r\n // console.log(e.target.getAttribute(\"value\"))\r\n    \r\n  };\r\n\r\n  render() {\r\n    const { optionsList } = this.props;\r\n    const { showOptionList, defaultSelectText } = this.state;\r\n    return (\r\n      <div className=\"custom-select-container\">\r\n         \r\n        <div onClick={this.handleListDisplay}>\r\n          <img className={showOptionList ? \"selected-text active\" : \"selected-text\"} src={Icon} />\r\n        \r\n          \r\n           <div className = \"custom-select-container-text\"> {defaultSelectText}</div></div>\r\n         \r\n       \r\n       \r\n        {showOptionList && (\r\n          <ul className=\"select-options\">\r\n            {this.props.optionsList.map(option => {\r\n              return (\r\n                <li\r\n                  className=\"custom-select-option\"\r\n                  data-name={option.text}\r\n                  key={option.key}\r\n                  value={[option.key]}\r\n                  onClick ={ this.handleOptionClick}\r\n                >\r\n                  {option.text}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;","C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\ColorModel.js",["68","69","70"],"C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Components\\ImageLoader.js",[],"C:\\Users\\LIlia\\Desktop\\React\\Proj\\myfirstreact\\src\\Helpers\\ColorConvertor.js",["71","72","73","74","75","76","77","78","79"],"export default class ColorCovertor\r\n{\r\n    rgbToHex(color) \r\n    {\r\n        console.log(color)\r\n        return \"#\" + this.componentToHex(color[0]) + this.componentToHex(color[1]) + this.componentToHex(color[2]);\r\n    }\r\n\r\n    componentToHex(c)\r\n    {\r\n        var hex = c.toString(16);\r\n        return hex.length == 1 ? \"0\" + hex : hex;\r\n    }\r\n\r\n    getRandomColor() \r\n    {\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n    \r\n    rgbToHsl(arr)\r\n    {\r\n        let hslArr =[]\r\n        for (var i = 0; i < arr.length; i++) \r\n        {\r\n            hslArr.push( this.elementRgbToHsl(arr[i]))\r\n        }\r\n        return hslArr\r\n    }\r\n\r\n    dataToRgb(arr)\r\n    {\r\n        \r\n        let rgbArray = []\r\n        for (var i = 0; i < arr.length; i+=4) \r\n        {\r\n        rgbArray.push([arr[i], arr[i+1], arr[i+2]])\r\n        }\r\n        return rgbArray\r\n    }\r\n\r\n\r\n\r\n    \r\n   hslToRgb(arr)\r\n   {\r\n    var rgbArr =[]\r\n        for (var i = 0; i < arr.length; i++) \r\n        {\r\n            rgbArr.push(this.elementHslToRgb(arr[i]))\r\n        }\r\n        return rgbArr\r\n    }\r\n\r\n    changeSaturationHsl(arr,percent)\r\n    {\r\n     \r\n        let change = (percent-50)/50\r\n        let divider =1;\r\n        \r\n        for(let i=0;i<arr.length;i++)\r\n        {\r\n           \r\n            if(arr[i][0]>= 50  && arr[i][0]<=70)\r\n            {\r\n               // change = arr[i][1];\r\n            \r\n               arr[i][1] += change*arr[i][1]\r\n\r\n                if (arr[i][1]>100)\r\n                    arr[i][1]=100\r\n                if(arr[i][1]<0)\r\n                    arr[i][1]=0\r\n                //change =arr[i][1] -change\r\n            }\r\n            if((arr[i][0]>= 30  && arr[i][0]<50) || (arr[i][0]> 70  && arr[i][0]<=90))\r\n            {\r\n             \r\n                divider =0.6;\r\n                if(percent<50)\r\n                    divider =0.2;\r\n                arr[i][1] += change*divider*arr[i][1]\r\n               \r\n\r\n                \r\n                if (arr[i][1]>100)\r\n                    arr[i][1]=100\r\n                if(arr[i][1]<0)\r\n                    arr[i][1]=0\r\n            }\r\n            if((arr[i][0]>= 10  && arr[i][0]<30) || (arr[i][0]> 90  && arr[i][0]<=110))\r\n            {\r\n                divider =0.3;\r\n                if(percent<50)\r\n                    divider =0.3;\r\n\r\n               arr[i][1] += change*divider*arr[i][1]\r\n\r\n                if (arr[i][1]>100)\r\n                    arr[i][1]=100\r\n                if(arr[i][1]<0)\r\n                    arr[i][1]=0\r\n            }\r\n            if((arr[i][0]<10) || (arr[i][0]> 110 && arr[i][0]<=150))\r\n            {\r\n           \r\n                divider =0.2;\r\n                if(percent<50)\r\n                    divider =0.6;\r\n\r\n               arr[i][1] += change*divider*arr[i][1]\r\n\r\n                if (arr[i][1]>100)\r\n                    arr[i][1]=100\r\n                if(arr[i][1]<0)\r\n                    arr[i][1]=0\r\n            }\r\n\r\n        }\r\n        return arr\r\n    }\r\n    rgbToData(imageData,arr)\r\n    {\r\n        let arrCounter= 0\r\n        for (var i = 0; arrCounter < arr.length; i+=4) \r\n        {\r\n            \r\n            imageData.data[i] = arr[arrCounter][0]\r\n            imageData.data[i+1] = arr[arrCounter][1]\r\n            imageData.data[i+2] = arr[arrCounter][2]\r\n            imageData.data[i+3] = 255\r\n            arrCounter++\r\n        }\r\n        console.log(imageData)\r\n        return imageData\r\n    }\r\n\r\n    elementHslToRgb(hsl) \r\n    {\r\n        var h = hsl[0];\r\n        var s = hsl[1];\r\n        var l = hsl[2];\r\n        s /= 100;\r\n        l /= 100;\r\n        let C = (1 - Math.abs(2 * l - 1)) * s;\r\n        var hue = h / 60;\r\n        let X = C * (1 - Math.abs(hue % 2 - 1));\r\n        let r = 0\r\n        let g =0 \r\n        let b = 0;\r\n        if (hue >= 0 && hue < 1) {\r\n            r = C;\r\n            g = X;\r\n        } else if (hue >= 1 && hue < 2) {\r\n            r = X;\r\n            g = C;\r\n        } else if (hue >= 2 && hue < 3) {\r\n            g = C;\r\n            b = X;\r\n        } else if(hue >= 3 && hue < 4) {\r\n            g = X;\r\n            b = C;\r\n        } else if (hue >= 4 && hue < 5) {\r\n            r = X;\r\n            b = C;\r\n        } else {\r\n            r = C;\r\n            b = X;\r\n        }\r\n        let m = l - C / 2;\r\n        r += m;\r\n        g += m;\r\n        b += m;\r\n        r *= 255.0;\r\n        g *= 255.0;\r\n        b *= 255.0;\r\n        return [Math.round(r), Math.round(g), Math.round(b)];\r\n    }\r\n\r\n    elementRgbToHsl(rgb) \r\n    {\r\n        var red = rgb[0] < 0 ? 0 : rgb[0] > 255 ? 255 : rgb[0];\r\n        var green = rgb[1] < 0 ? 0 : rgb[1] > 255 ? 255 : rgb[1];\r\n        var blue = rgb[2] < 0 ? 0 : rgb[2] > 255 ? 255 : rgb[2];\r\n\r\n        var r = Number(red / 255),\r\n            g = Number(green / 255),\r\n            b = Number(blue / 255),\r\n            min = Math.min(r, g, b),\r\n            max = Math.max(r, g, b),\r\n            delta = max - min,\r\n            h=0, s=0, l=0;\r\n        if (max == min) {\r\n            h = 0;\r\n        } else if (r == max) {\r\n            h = (g - b) / delta;\r\n        } else if (g == max) {\r\n            h = 2 + (b - r) / delta;\r\n        } else if (b == max) {\r\n            h = 4 + (r - g) / delta;\r\n        }\r\n        h = Math.min(h * 60, 360);\r\n        if (h < 0) h += 360;\r\n            l = (min + max) / 2;\r\n        if (max == min) \r\n            s = 0;\r\n        else if (l <= 0.5) \r\n            s = delta / (max + min);\r\n        else \r\n            s = delta / (2 - max - min);\r\n        return [\r\n                Math.round(h),\r\n                Math.round(s * 100),\r\n                Math.round(l * 100)]\r\n    } \r\n    \r\n    elementRgbToCmyk (rgb) \r\n    {\r\n        var computedC = 0;\r\n        var computedM = 0;\r\n        var computedY = 0;\r\n        var computedK = 0;\r\n       \r\n       \r\n       let r =  parseInt(rgb[0])\r\n       let g = parseInt(rgb[1])\r\n       let b = parseInt(rgb[2])\r\n        // BLACK\r\n        if (r==0 && g==0 && b==0) {\r\n         computedK = 1;\r\n         return [0,0,0,1];\r\n        }\r\n       \r\n        computedC = 1 - (r/255);\r\n        computedM = 1 - (g/255);\r\n        computedY = 1 - (b/255);\r\n       \r\n        var minCMY = Math.min(computedC,\r\n                     Math.min(computedM,computedY));\r\n        computedC = Math.round((computedC - minCMY) / (1 - minCMY) * 100) ;\r\n        computedM = Math.round((computedM - minCMY) / (1 - minCMY) * 100) ;\r\n        computedY = Math.round((computedY - minCMY) / (1 - minCMY) * 100 );\r\n        computedK = Math.round(minCMY * 100);\r\n       \r\n        return [ computedC,computedM,computedY,computedK]\r\n    }\r\n\r\n    rgbToCmyk(arr)\r\n    {\r\n        let cmykArr =[]\r\n        for (var i = 0; i < arr.length; i++) \r\n        {\r\n            cmykArr.push( this.elementRgbToCmyk(arr[i]))\r\n        }\r\n        return cmykArr\r\n    }\r\n\r\n    elementCmykToRgb (cmyk)\r\n    {\r\n\t\t\r\n\t\tlet c = cmyk[0] / 100;\r\n\t\tlet m = cmyk[1]/ 100;\r\n\t\tlet y = cmyk[2] / 100;\r\n\t\tlet k = cmyk[3]/ 100;\r\n \r\n\t\tlet r = 1 - Math.min( 1, c * ( 1 - k ) + k );\r\n\t\tlet g = 1 - Math.min( 1, m * ( 1 - k ) + k );\r\n\t\tlet b = 1 - Math.min( 1, y * ( 1 - k ) + k );\r\n \r\n\t\tr = Math.round( r * 255 );\r\n\t\tg = Math.round( g * 255 );\r\n\t\tb = Math.round( b * 255 );\r\n \r\n\t\treturn [r,g,b]\r\n    }\r\n    \r\n    cmykToRgb(arr)\r\n    {\r\n        let rgbArr =[]\r\n        for (var i = 0; i < arr.length; i++) \r\n        {\r\n            rgbArr.push( this.elementCmykToRgb(arr[i]))\r\n        }\r\n        return rgbArr\r\n    }\r\n    changeSaturationCmyk(arr,percent)\r\n    {\r\n        for(let i=0;i<arr.length;i++)\r\n        {\r\n            arr[i][2] = (arr[i][2]*percent)/50\r\n            if(arr[i][2]>100)\r\n                arr[i][2]=100\r\n            if(arr[i][2]<0)\r\n                arr[i][2]=0\r\n        }\r\n        return arr\r\n    }\r\n}",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":11,"column":9,"nodeType":"86","messageId":"87","endLine":11,"endColumn":18},{"ruleId":"84","severity":1,"message":"88","line":2,"column":42,"nodeType":"86","messageId":"87","endLine":2,"endColumn":52},{"ruleId":"89","severity":1,"message":"90","line":11,"column":12,"nodeType":"91","messageId":"92","endLine":11,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":12,"column":12,"nodeType":"91","messageId":"92","endLine":12,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":13,"column":12,"nodeType":"91","messageId":"92","endLine":13,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":14,"column":12,"nodeType":"91","messageId":"92","endLine":14,"endColumn":25},{"ruleId":"89","severity":1,"message":"90","line":15,"column":12,"nodeType":"91","messageId":"92","endLine":15,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":16,"column":12,"nodeType":"91","messageId":"92","endLine":16,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":112,"column":32,"nodeType":"95","messageId":"96","endLine":112,"endColumn":34},{"ruleId":"97","severity":1,"message":"98","line":116,"column":13,"nodeType":"99","endLine":116,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":129,"column":14,"nodeType":"99","endLine":129,"endColumn":24},{"ruleId":"97","severity":1,"message":"98","line":136,"column":9,"nodeType":"99","endLine":136,"endColumn":33},{"ruleId":"97","severity":1,"message":"98","line":137,"column":9,"nodeType":"99","endLine":137,"endColumn":33},{"ruleId":"97","severity":1,"message":"98","line":138,"column":9,"nodeType":"99","endLine":138,"endColumn":28},{"ruleId":"97","severity":1,"message":"98","line":139,"column":9,"nodeType":"99","endLine":139,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":9,"column":7,"nodeType":"102","endLine":9,"endColumn":49},{"ruleId":"84","severity":1,"message":"103","line":75,"column":13,"nodeType":"86","messageId":"87","endLine":75,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":81,"column":11,"nodeType":"102","endLine":81,"endColumn":99},{"ruleId":"93","severity":1,"message":"104","line":77,"column":23,"nodeType":"95","messageId":"96","endLine":77,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":138,"column":17,"nodeType":"107","messageId":"108","endLine":138,"endColumn":26,"fix":"109"},{"ruleId":"100","severity":1,"message":"101","line":212,"column":136,"nodeType":"102","endLine":212,"endColumn":178},{"ruleId":"93","severity":1,"message":"104","line":12,"column":27,"nodeType":"95","messageId":"96","endLine":12,"endColumn":29},{"ruleId":"93","severity":1,"message":"104","line":197,"column":17,"nodeType":"95","messageId":"96","endLine":197,"endColumn":19},{"ruleId":"93","severity":1,"message":"104","line":199,"column":22,"nodeType":"95","messageId":"96","endLine":199,"endColumn":24},{"ruleId":"93","severity":1,"message":"104","line":201,"column":22,"nodeType":"95","messageId":"96","endLine":201,"endColumn":24},{"ruleId":"93","severity":1,"message":"104","line":203,"column":22,"nodeType":"95","messageId":"96","endLine":203,"endColumn":24},{"ruleId":"93","severity":1,"message":"104","line":209,"column":17,"nodeType":"95","messageId":"96","endLine":209,"endColumn":19},{"ruleId":"93","severity":1,"message":"104","line":233,"column":14,"nodeType":"95","messageId":"96","endLine":233,"endColumn":16},{"ruleId":"93","severity":1,"message":"104","line":233,"column":22,"nodeType":"95","messageId":"96","endLine":233,"endColumn":24},{"ruleId":"93","severity":1,"message":"104","line":233,"column":30,"nodeType":"95","messageId":"96","endLine":233,"endColumn":32},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'container' is assigned a value but never used.","Identifier","unusedVar","'cosComplex' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'optionsList' is assigned a value but never used.","Expected '===' and instead saw '=='.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"112","text":"113"},"no-global-assign","no-unsafe-negation",[3284,3284],"()"]